#img <- readJPEG("C:/Users/maximilian.lacher/Downloads/test.jpg")
i=1
#img <- readJPEG("E:/Users/lacher/Documents/GitHub/Photo-and-Web-Mining/sunset.jpg")
Cluster_result  <- data.frame(File=character())
while (i <= length(files)){
location <- paste(Path,files[i],sep= "/")
img <- readJPEG(location)
x_Pixel<-img[1,,1]
y_Pixel<-img[,1,1]
x_Size<-length(x_Pixel)
y_Size<-length(y_Pixel)
x_Grid<-Div_Raster(x_Size, 20)
y_Grid<-Div_Raster(y_Size, 18)
setWinProgressBar(pb,i/(length(files))*100)
img_c<-Clustered_Pic(img,y_Size,x_Size)
Pic_result<-Analyse_Pic(img_c)
Pic_result<- cbind.data.frame(Pic_result,(Pic_result$sd_mean/max(Pic_result$sd_mean)) ,files[i],x_Size/y_Size)
Cluster_result <- rbind.data.frame(Cluster_result,Pic_result)
i = i+1
Pic_result<-""
}
close(pb)
test <-Cluster_result[(Cluster_result$`(Pic_result$sd_mean/max(Pic_result$sd_mean))`> 0.35),]
counts <- ddply(test, .(test$Xaxis, test$Yaxis), nrow)
names(counts) <- c("xaxe", "yaxe", "Freq")
#neu<-describeBy(test$`(Pic_result$sd_mean/max(Pic_result$sd_mean))`, test$Xaxis, test$Yaxis, mat= TRUE)
ggplot(counts, aes(x= xaxe, y = yaxe))+
geom_tile(aes(fill=Freq))+
ylim(-18,0)+
theme_minimal()
files = list.files(path = "C:/Users/maximilian.lacher/Documents/GitHub/Photo-and-Web-Mining", pattern="*.jpg")
pb<-winProgressBar(title="Example progress bar", label="progress bar",min=0,max=100, initial = 0, width = 300)
Path <- "C:/Users/maximilian.lacher/Documents/GitHub/Photo-and-Web-Mining"
#Cluster_result <- needs to be defined
#img <- readJPEG("C:/Users/maximilian.lacher/Downloads/test.jpg")
i=1
#img <- readJPEG("E:/Users/lacher/Documents/GitHub/Photo-and-Web-Mining/sunset.jpg")
Cluster_result  <- data.frame(File=character())
while (i <= length(files)){
location <- paste(Path,files[i],sep= "/")
img <- readJPEG(location)
x_Pixel<-img[1,,1]
y_Pixel<-img[,1,1]
x_Size<-length(x_Pixel)
y_Size<-length(y_Pixel)
x_Grid<-Div_Raster(x_Size, 20)
y_Grid<-Div_Raster(y_Size, 18)
img_c<-Clustered_Pic(img,y_Size,x_Size)
Pic_result<-Analyse_Pic(img_c)
Pic_result<- cbind.data.frame(Pic_result,(Pic_result$sd_mean/max(Pic_result$sd_mean)) ,files[i],x_Size/y_Size)
Cluster_result <- rbind.data.frame(Cluster_result,Pic_result)
setWinProgressBar(pb,i/(length(files))*100)
i = i+1
Pic_result<-""
}
close(pb)
test <-Cluster_result[(Cluster_result$`(Pic_result$sd_mean/max(Pic_result$sd_mean))`> 0.35),]
counts <- ddply(test, .(test$Xaxis, test$Yaxis), nrow)
names(counts) <- c("xaxe", "yaxe", "Freq")
#neu<-describeBy(test$`(Pic_result$sd_mean/max(Pic_result$sd_mean))`, test$Xaxis, test$Yaxis, mat= TRUE)
ggplot(counts, aes(x= xaxe, y = yaxe))+
geom_tile(aes(fill=Freq))+
ylim(-18,0)+
theme_minimal()
test <-Cluster_result[(Cluster_result$`(Pic_result$sd_mean/max(Pic_result$sd_mean))`> 0.3),]
counts <- ddply(test, .(test$Xaxis, test$Yaxis), nrow)
names(counts) <- c("xaxe", "yaxe", "Freq")
#neu<-describeBy(test$`(Pic_result$sd_mean/max(Pic_result$sd_mean))`, test$Xaxis, test$Yaxis, mat= TRUE)
ggplot(counts, aes(x= xaxe, y = yaxe))+
geom_tile(aes(fill=Freq))+
ylim(-18,0)+
theme_minimal()
test <-Cluster_result[(Cluster_result$`(Pic_result$sd_mean/max(Pic_result$sd_mean))`> 0.4),]
counts <- ddply(test, .(test$Xaxis, test$Yaxis), nrow)
names(counts) <- c("xaxe", "yaxe", "Freq")
#neu<-describeBy(test$`(Pic_result$sd_mean/max(Pic_result$sd_mean))`, test$Xaxis, test$Yaxis, mat= TRUE)
ggplot(counts, aes(x= xaxe, y = yaxe))+
geom_tile(aes(fill=Freq))+
ylim(-18,0)+
theme_minimal()
test <-Cluster_result[(Cluster_result$`(Pic_result$sd_mean/max(Pic_result$sd_mean))`> 0.35),]
counts <- ddply(test, .(test$Xaxis, test$Yaxis), nrow)
names(counts) <- c("xaxe", "yaxe", "Freq")
#neu<-describeBy(test$`(Pic_result$sd_mean/max(Pic_result$sd_mean))`, test$Xaxis, test$Yaxis, mat= TRUE)
ggplot(counts, aes(x= xaxe, y = yaxe))+
geom_tile(aes(fill=Freq))+
ylim(-18,0)+
theme_minimal()
test <-Cluster_result[(Cluster_result$`(Pic_result$sd_mean/max(Pic_result$sd_mean))`> 0.4),]
counts <- ddply(test, .(test$Xaxis, test$Yaxis), nrow)
names(counts) <- c("xaxe", "yaxe", "Freq")
#neu<-describeBy(test$`(Pic_result$sd_mean/max(Pic_result$sd_mean))`, test$Xaxis, test$Yaxis, mat= TRUE)
ggplot(counts, aes(x= xaxe, y = yaxe))+
geom_tile(aes(fill=Freq))+
ylim(-18,0)+
theme_minimal()
test <-Cluster_result[(Cluster_result$`(Pic_result$sd_mean/max(Pic_result$sd_mean))`> 0.35),]
counts <- ddply(test, .(test$Xaxis, test$Yaxis), nrow)
names(counts) <- c("xaxe", "yaxe", "Freq")
#neu<-describeBy(test$`(Pic_result$sd_mean/max(Pic_result$sd_mean))`, test$Xaxis, test$Yaxis, mat= TRUE)
ggplot(counts, aes(x= xaxe, y = yaxe))+
geom_tile(aes(fill=Freq))+
ylim(-18,0)+
theme_minimal()
ggplot(Cluster_result , aes(x=Xaxis,y=Yaxis))+
geom_tile(aes(fill=rgb(med_red,med_green,med_blue)))+
scale_fill_identity()+
theme_minimal()
test <-Cluster_result[(Cluster_result$`(Pic_result$sd_mean/max(Pic_result$sd_mean))`> 0.35),]
counts <- ddply(test, .(test$Xaxis, test$Yaxis), nrow)
names(counts) <- c("xaxe", "yaxe", "Freq")
#neu<-describeBy(test$`(Pic_result$sd_mean/max(Pic_result$sd_mean))`, test$Xaxis, test$Yaxis, mat= TRUE)
ggplot(counts, aes(x= xaxe, y = yaxe))+
geom_tile(aes(fill=Freq))+
ylim(-18,0)+
theme_minimal()
ggplot(counts, aes(x= xaxe, y = yaxe))+
geom_tile(aes(fill=Freq))+
scale_fill_gradientn(colours = terrain.colors(10))+
ylim(-18,0)+
theme_minimal()
ggplot(counts, aes(x= xaxe, y = yaxe))+
geom_tile(aes(fill=Freq))+
scale_fill_gradientn(colours = terrain.colors(6))+
ylim(-18,0)+
theme_minimal()
ggplot(counts, aes(x= xaxe, y = yaxe))+
geom_tile(aes(fill=Freq))+
scale_fill_gradientn(colours = terrain.colors(5))+
ylim(-18,0)+
theme_minimal()
ggplot(counts, aes(x= xaxe, y = yaxe))+
geom_tile(aes(fill=Freq))+
scale_fill_gradientn(colours = terrain.colors(5))+
ylim(-18,0)+
theme_minimal()
ggplot(counts, aes(x= xaxe, y = yaxe))+
geom_tile(aes(fill=Freq))+
scale_fill_distiller(palette = "Spectral")+
ylim(-18,0)+
theme_minimal()
ggplot(Cluster_result)
ggplot(Cluster_result)+
annotate("rect", xmin=c1, xmax=2, ymin= 1, ymax=`x_Size/y_Size`, alpha=0.2, color="blue", fill="blue")
ggplot(Cluster_result)+
annotate("rect", xmin=1, xmax=2, ymin= 1, ymax=`x_Size/y_Size`, alpha=0.2, color="blue", fill="blue")
ggplot(Cluster_result)+
annotate("rect", xmin=1, xmax=2, ymin= 1, ymax=Cluster_result$`x_Size/y_Size`, alpha=0.2, color="blue", fill="blue")
levels(Cluster_result$`x_Size/y_Size`)
factor(Cluster_result$`x_Size/y_Size`)
ggplot(Cluster_result)+
annotate("rect", xmin=1, xmax=2, ymin= 1, ymax=levels(factor(Cluster_result$`x_Size/y_Size`)), alpha=0.2, color="blue", fill="blue")
as.numeric(levels(factor(Cluster_result$`x_Size/y_Size`))
as.numeric(levels(factor(Cluster_result$`x_Size/y_Size`)))
as.numeric(levels(factor(Cluster_result$`x_Size/y_Size`)))
ggplot(Cluster_result)+
annotate("rect", xmin=1, xmax=2, ymin= 1, ymax=as.numeric(levels(factor(Cluster_result$`x_Size/y_Size`))), alpha=0.2, color="blue", fill="blue")
ggplot(Cluster_result)+
annotate("rect", xmin=1, xmax=2, ymin= 1,
ymax=as.numeric(levels(factor(Cluster_result$`x_Size/y_Size`))), alpha=0.1, color="blue", fill="blue")
ggplot(Cluster_result)+
annotate("rect", xmin=1, xmax=2, ymin= 1,
ymax=as.numeric(levels(factor(Cluster_result$`x_Size/y_Size`))), alpha=0.1, color="blue", fill="blue")
+
theme_minimal()
ggplot(Cluster_result)+
theme_minimal()+
annotate("rect", xmin=1, xmax=2, ymin= 1,
ymax=as.numeric(levels(factor(Cluster_result$`x_Size/y_Size`))), alpha=0.1, color="blue", fill="blue")
ggplot(Cluster_result)+
theme(panel.border = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"))+
annotate("rect", xmin=1, xmax=2, ymin= 1,
ymax=as.numeric(levels(factor(Cluster_result$`x_Size/y_Size`))), alpha=0.1, color="blue", fill="blue")
ggplot(Cluster_result)+
theme(panel.border = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_blank())+
annotate("rect", xmin=1, xmax=2, ymin= 1,
ymax=as.numeric(levels(factor(Cluster_result$`x_Size/y_Size`))), alpha=0.1, color="blue", fill="blue")
ggplot(Cluster_result)+
theme(panel.border = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_blank(),plot.background = element_blank())+
annotate("rect", xmin=1, xmax=2, ymin= 1,
ymax=as.numeric(levels(factor(Cluster_result$`x_Size/y_Size`))), alpha=0.1, color="blue", fill="blue")
ggplot(Cluster_result)+
theme_bw() +
theme(panel.border = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_blank())+
annotate("rect", xmin=1, xmax=2, ymin= 1,
ymax=as.numeric(levels(factor(Cluster_result$`x_Size/y_Size`))), alpha=0.1, color="blue", fill="blue")
ggplot(Cluster_result)+
theme_bw() +
theme(panel.border = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_blank())+
annotate("rect", xmin=0, xmax=1, ymin= 0,
ymax=as.numeric(1-levels(factor(Cluster_result$`x_Size/y_Size`))), alpha=0.1, color="blue", fill="blue")
ggplot(Cluster_result)+
theme_bw() +
theme(panel.border = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_blank())+
annotate("rect", xmin=0, xmax=1, ymin= 0,
ymax=1-as.numeric(levels(factor(Cluster_result$`x_Size/y_Size`))), alpha=0.1, color="blue", fill="blue")
ggplot(Cluster_result)+
theme_bw() +
theme(panel.border = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_blank())+
annotate("rect", xmin=0, xmax=1, ymin= 0,
ymax=as.numeric(levels(factor(Cluster_result$`x_Size/y_Size`)))-1, alpha=0.1, color="blue", fill="blue")
ggplot(Cluster_result)+
theme_bw() +
theme(panel.border = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_blank())+
ylim(0,1)+
annotate("rect", xmin=0, xmax=1, ymin= 0,
ymax=as.numeric(levels(factor(Cluster_result$`x_Size/y_Size`)))-1, alpha=0.1, color="blue", fill="blue")
ggplot(Cluster_result)+
theme_bw() +
theme(panel.border = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_blank())+
ylim(0,1)+
annotate("rect", xmin=0, xmax=1, ymin= 0,
ymax=as.numeric(levels(factor(Cluster_result$`x_Size/y_Size`)))-1, alpha=0.1, color="blue", fill="blue")
test <-Cluster_result[(Cluster_result$`(Pic_result$sd_mean/max(Pic_result$sd_mean))`> 0.35),]
counts <- ddply(test, .(test$Xaxis, test$Yaxis), nrow)
names(counts) <- c("xaxe", "yaxe", "Freq")
#neu<-describeBy(test$`(Pic_result$sd_mean/max(Pic_result$sd_mean))`, test$Xaxis, test$Yaxis, mat= TRUE)
ggplot(counts, aes(x= xaxe, y = yaxe))+
geom_tile(aes(fill=Freq))+
scale_fill_distiller(palette = "Spectral")+
ylim(-18,0)+
theme_minimal()
combo.box <- grid.arrange(p1,p2, nrow = 2)
#this will display your image to test you read it correctly
if(exists("rasterImage")){
plot(1:2, type='n')
rasterImage(img,1,1,2,2)
}
if(exists("rasterImage")){
plot(1:2, type='n')
rasterImage(img,1,1,2,2)
}
ggplot(counts, aes(x= xaxe, y = yaxe))+
geom_tile(aes(fill=Freq))+
scale_fill_distiller(palette = "Spectral")+
ylim(-18,0)+
theme_minimal()
ggplot(Cluster_result , aes(x=Xaxis,y=Yaxis))+
geom_tile(aes(fill=rgb(med_red,med_green,med_blue)))+
scale_fill_identity()+
theme_minimal()
if(exists("rasterImage")){
plot(1:2, type='n')
rasterImage(img,1,1,2,2)
}
if(exists("rasterImage")){
plot(1:2, type='n')
rasterImage(img,1,1,2,2)
}
ggplot(Cluster_result , aes(x=Xaxis,y=Yaxis))+
geom_tile(aes(fill=rgb(med_red,med_green,med_blue)))+
scale_fill_identity()+
theme_minimal()
test <-Cluster_result[(Cluster_result$`(Pic_result$sd_mean/max(Pic_result$sd_mean))`> 0.35),]
counts <- ddply(test, .(test$Xaxis, test$Yaxis), nrow)
names(counts) <- c("xaxe", "yaxe", "Freq")
#neu<-describeBy(test$`(Pic_result$sd_mean/max(Pic_result$sd_mean))`, test$Xaxis, test$Yaxis, mat= TRUE)
ggplot(counts, aes(x= xaxe, y = yaxe))+
geom_tile(aes(fill=Freq))+
scale_fill_distiller(palette = "Spectral")+
ylim(-18,0)+
theme_minimal()
test <-Cluster_result[(Cluster_result$`(Pic_result$sd_mean/max(Pic_result$sd_mean))`> 0.3),]
counts <- ddply(test, .(test$Xaxis, test$Yaxis), nrow)
names(counts) <- c("xaxe", "yaxe", "Freq")
#neu<-describeBy(test$`(Pic_result$sd_mean/max(Pic_result$sd_mean))`, test$Xaxis, test$Yaxis, mat= TRUE)
ggplot(counts, aes(x= xaxe, y = yaxe))+
geom_tile(aes(fill=Freq))+
scale_fill_distiller(palette = "Spectral")+
ylim(-18,0)+
theme_minimal()
test <-Cluster_result[(Cluster_result$`(Pic_result$sd_mean/max(Pic_result$sd_mean))`> 0.2),]
counts <- ddply(test, .(test$Xaxis, test$Yaxis), nrow)
names(counts) <- c("xaxe", "yaxe", "Freq")
#neu<-describeBy(test$`(Pic_result$sd_mean/max(Pic_result$sd_mean))`, test$Xaxis, test$Yaxis, mat= TRUE)
ggplot(counts, aes(x= xaxe, y = yaxe))+
geom_tile(aes(fill=Freq))+
scale_fill_distiller(palette = "Spectral")+
ylim(-18,0)+
theme_minimal()
test <-Cluster_result[(Cluster_result$`(Pic_result$sd_mean/max(Pic_result$sd_mean))`> 0.15),]
counts <- ddply(test, .(test$Xaxis, test$Yaxis), nrow)
names(counts) <- c("xaxe", "yaxe", "Freq")
#neu<-describeBy(test$`(Pic_result$sd_mean/max(Pic_result$sd_mean))`, test$Xaxis, test$Yaxis, mat= TRUE)
ggplot(counts, aes(x= xaxe, y = yaxe))+
geom_tile(aes(fill=Freq))+
scale_fill_distiller(palette = "Spectral")+
ylim(-18,0)+
theme_minimal()
test <-Cluster_result[(Cluster_result$`(Pic_result$sd_mean/max(Pic_result$sd_mean))`> 0.1),]
counts <- ddply(test, .(test$Xaxis, test$Yaxis), nrow)
names(counts) <- c("xaxe", "yaxe", "Freq")
#neu<-describeBy(test$`(Pic_result$sd_mean/max(Pic_result$sd_mean))`, test$Xaxis, test$Yaxis, mat= TRUE)
ggplot(counts, aes(x= xaxe, y = yaxe))+
geom_tile(aes(fill=Freq))+
scale_fill_distiller(palette = "Spectral")+
ylim(-18,0)+
theme_minimal()
test <-Cluster_result[(Cluster_result$`(Pic_result$sd_mean/max(Pic_result$sd_mean))`> 0.35),]
counts <- ddply(test, .(test$Xaxis, test$Yaxis), nrow)
names(counts) <- c("xaxe", "yaxe", "Freq")
#neu<-describeBy(test$`(Pic_result$sd_mean/max(Pic_result$sd_mean))`, test$Xaxis, test$Yaxis, mat= TRUE)
ggplot(counts, aes(x= xaxe, y = yaxe))+
geom_tile(aes(fill=Freq))+
scale_fill_distiller(palette = "Spectral")+
ylim(-18,0)+
theme_minimal()
files = list.files(path = "C:/Users/maximilian.lacher/Documents/GitHub/Photo-and-Web-Mining", pattern="*.jpg")
pb<-winProgressBar(title="Example progress bar", label="progress bar",min=0,max=100, initial = 0, width = 300)
Path <- "C:/Users/maximilian.lacher/Documents/GitHub/Photo-and-Web-Mining"
#Cluster_result <- needs to be defined
#img <- readJPEG("C:/Users/maximilian.lacher/Downloads/test.jpg")
i=1
#img <- readJPEG("E:/Users/lacher/Documents/GitHub/Photo-and-Web-Mining/sunset.jpg")
Cluster_result  <- data.frame(File=character())
while (i <= length(files)){
location <- paste(Path,files[i],sep= "/")
img <- readJPEG(location)
x_Pixel<-img[1,,1]
y_Pixel<-img[,1,1]
x_Size<-length(x_Pixel)
y_Size<-length(y_Pixel)
x_Grid<-Div_Raster(x_Size, 16)
y_Grid<-Div_Raster(y_Size, 24)
img_c<-Clustered_Pic(img,y_Size,x_Size)
Pic_result<-Analyse_Pic(img_c)
Pic_result<- cbind.data.frame(Pic_result,(Pic_result$sd_mean/max(Pic_result$sd_mean)) ,files[i],x_Size/y_Size)
Cluster_result <- rbind.data.frame(Cluster_result,Pic_result)
setWinProgressBar(pb,i/(length(files))*100)
i = i+1
Pic_result<-""
}
close(pb)
ggplot(Cluster_result , aes(x=Xaxis,y=Yaxis))+
geom_tile(aes(fill=rgb(med_red,med_green,med_blue)))+
scale_fill_identity()+
theme_minimal()
if(exists("rasterImage")){
plot(1:2, type='n')
rasterImage(img,1,1,2,2)
}
ggplot(Cluster_result)+
theme_bw() +
theme(panel.border = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_blank())+
ylim(0,1)+
annotate("rect", xmin=0, xmax=1, ymin= 0,
ymax=as.numeric(levels(factor(Cluster_result$`x_Size/y_Size`)))-1, alpha=0.1, color="blue", fill="blue")
test <-Cluster_result[(Cluster_result$`(Pic_result$sd_mean/max(Pic_result$sd_mean))`> 0.35),]
counts <- ddply(test, .(test$Xaxis, test$Yaxis), nrow)
names(counts) <- c("xaxe", "yaxe", "Freq")
ggplot(Cluster_result)+
theme_bw() +
theme(panel.border = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_blank())+
ylim(0,1)+
annotate("rect", xmin=0, xmax=1, ymin= 0,
ymax=as.numeric(levels(factor(Cluster_result$`x_Size/y_Size`)))-1, alpha=0.1, color="blue", fill="blue")
ggplot(counts, aes(x= xaxe, y = yaxe))+
geom_tile(aes(fill=Freq))+
scale_fill_distiller(palette = "Spectral")+
ylim(-18,0)+
theme_minimal()
test <-Cluster_result[(Cluster_result$`(Pic_result$sd_mean/max(Pic_result$sd_mean))`> 0.35),]
counts <- ddply(test, .(test$Xaxis, test$Yaxis), nrow)
names(counts) <- c("xaxe", "yaxe", "Freq")
ggplot(Cluster_result)+
theme_bw() +
theme(panel.border = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_blank())+
ylim(0,1)+
annotate("rect", xmin=0, xmax=1, ymin= 0,
ymax=as.numeric(levels(factor(Cluster_result$`x_Size/y_Size`)))-1, alpha=0.1, color="blue", fill="blue")
ggplot(Cluster_result)+
theme_bw() +
theme(panel.border = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_blank())+
ylim(0,1)+
annotate("rect", xmin=0, xmax=1, ymin= 0,
ymax=as.numeric(levels(factor(Cluster_result$`x_Size/y_Size`))), alpha=0.1, color="blue", fill="blue")
ggplot(Cluster_result)+
theme_bw() +
theme(panel.border = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_blank())+
ylim(0,1)+
annotate("rect", xmin=0, xmax=1, ymin= 0,
ymax=1/as.numeric(levels(factor(Cluster_result$`x_Size/y_Size`))), alpha=0.1, color="blue", fill="blue")
ggplot(Cluster_result)+
theme_bw() +
theme(panel.border = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_blank())+
ylim(0,1)+
annotate("rect", xmin=0, xmax=1, ymin= 0,
ymax=1/(as.numeric(levels(factor(Cluster_result$`x_Size/y_Size`)))), alpha=0.1, color="blue", fill="blue")
1/(as.numeric(levels(factor(Cluster_result$`x_Size/y_Size`))))
ggplot(Cluster_result)+
theme_bw() +
theme(panel.border = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_blank())+
ylim(0,1.5)+
xlim(0,1.5)+
annotate("rect", xmin=0, xmax=1, ymin= 0,
ymax= 1/(as.numeric(levels(factor(Cluster_result$`x_Size/y_Size`)))), alpha=0.1, color="blue", fill="blue")
ggplot(Cluster_result)+
theme_bw() +
theme(panel.border = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_blank())+
annotate("rect", xmin=0, xmax=1, ymin= 0,
ymax= 1/(as.numeric(levels(factor(Cluster_result$`x_Size/y_Size`)))), alpha=0.1, color="blue", fill="blue")+
ylim(0,1.5)+
xlim(0,1.5)
test <-Cluster_result[(Cluster_result$`(Pic_result$sd_mean/max(Pic_result$sd_mean))`> 0.35),]
counts <- ddply(test, .(test$Xaxis, test$Yaxis), nrow)
names(counts) <- c("xaxe", "yaxe", "Freq")
neu<-describeBy(test$`(Pic_result$sd_mean/max(Pic_result$sd_mean))`, test$Xaxis, test$Yaxis, mat= TRUE)
ggplot(counts, aes(x= xaxe, y = yaxe))+
geom_tile(aes(fill=Freq))+
scale_fill_distiller(palette = "Spectral")+
ylim(-18,0)+
theme_minimal()
test <-Cluster_result[(Cluster_result$`(Pic_result$sd_mean/max(Pic_result$sd_mean))`> 0.45),]
counts <- ddply(test, .(test$Xaxis, test$Yaxis), nrow)
names(counts) <- c("xaxe", "yaxe", "Freq")
neu<-describeBy(test$`(Pic_result$sd_mean/max(Pic_result$sd_mean))`, test$Xaxis, test$Yaxis, mat= TRUE)
ggplot(counts, aes(x= xaxe, y = yaxe))+
geom_tile(aes(fill=Freq))+
scale_fill_distiller(palette = "Spectral")+
ylim(-18,0)+
theme_minimal()
test <-Cluster_result[(Cluster_result$`(Pic_result$sd_mean/max(Pic_result$sd_mean))`> 0.45),]
counts <- ddply(test, .(test$Xaxis, test$Yaxis), nrow)
names(counts) <- c("xaxe", "yaxe", "Freq")
neu<-describeBy(test$`(Pic_result$sd_mean/max(Pic_result$sd_mean))`, test$Xaxis, test$Yaxis, mat= TRUE)
ggplot(counts, aes(x= xaxe, y = yaxe))+
geom_tile(aes(fill=Freq))+
scale_fill_distiller(palette = "Spectral")+
ylim(-24,0)+
theme_minimal()
test <-Cluster_result[(Cluster_result$`(Pic_result$sd_mean/max(Pic_result$sd_mean))`> 0.5),]
counts <- ddply(test, .(test$Xaxis, test$Yaxis), nrow)
names(counts) <- c("xaxe", "yaxe", "Freq")
neu<-describeBy(test$`(Pic_result$sd_mean/max(Pic_result$sd_mean))`, test$Xaxis, test$Yaxis, mat= TRUE)
ggplot(counts, aes(x= xaxe, y = yaxe))+
geom_tile(aes(fill=Freq))+
scale_fill_distiller(palette = "Spectral")+
ylim(-24,0)+
theme_minimal()
test <-Cluster_result[(Cluster_result$`(Pic_result$sd_mean/max(Pic_result$sd_mean))`> 0.4),]
counts <- ddply(test, .(test$Xaxis, test$Yaxis), nrow)
names(counts) <- c("xaxe", "yaxe", "Freq")
neu<-describeBy(test$`(Pic_result$sd_mean/max(Pic_result$sd_mean))`, test$Xaxis, test$Yaxis, mat= TRUE)
ggplot(counts, aes(x= xaxe, y = yaxe))+
geom_tile(aes(fill=Freq))+
scale_fill_distiller(palette = "Spectral")+
ylim(-24,0)+
theme_minimal()
test <-Cluster_result[(Cluster_result$`(Pic_result$sd_mean/max(Pic_result$sd_mean))`> 0.5),]
counts <- ddply(test, .(test$Xaxis, test$Yaxis), nrow)
names(counts) <- c("xaxe", "yaxe", "Freq")
neu<-describeBy(test$`(Pic_result$sd_mean/max(Pic_result$sd_mean))`, test$Xaxis, test$Yaxis, mat= TRUE)
ggplot(counts, aes(x= xaxe, y = yaxe))+
geom_tile(aes(fill=Freq))+
scale_fill_distiller(palette = "Spectral")+
ylim(-24,0)+
theme_minimal()
ggplot(Cluster_result)+
theme_bw() +
theme(panel.border = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_blank())+
annotate("rect", xmin=0, xmax=1, ymin= 0,
ymax= 1/(as.numeric(levels(factor(Cluster_result$`x_Size/y_Size`)))), alpha=0.1, color="blue", fill="blue")+
ylim(0,1.5)+
xlim(0,1.5)
ggplot(Cluster_result , aes(x=Xaxis,y=Yaxis))+
geom_tile(aes(fill=rgb(med_red,med_green,med_blue)))+
scale_fill_identity()+
theme_minimal()
ggplot(Cluster_result)+
theme_bw() +
theme(panel.border = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_blank())+
annotate("rect", xmin=0, xmax=1, ymin= 0,
ymax= 1/(as.numeric(levels(factor(Cluster_result$`x_Size/y_Size`)))), alpha=0.1, color="blue", fill="blue")+
ylim(0,1.5)+
xlim(0,1.5)
test <-Cluster_result[(Cluster_result$`(Pic_result$sd_mean/max(Pic_result$sd_mean))`> 0.5),]
counts <- ddply(test, .(test$Xaxis, test$Yaxis), nrow)
names(counts) <- c("xaxe", "yaxe", "Freq")
neu<-describeBy(test$`(Pic_result$sd_mean/max(Pic_result$sd_mean))`, test$Xaxis, test$Yaxis, mat= TRUE)
ggplot(counts, aes(x= xaxe, y = yaxe))+
geom_tile(aes(fill=Freq))+
scale_fill_distiller(palette = "Spectral")+
ylim(-24,0)+
theme_minimal()
test <-Cluster_result[(Cluster_result$`(Pic_result$sd_mean/max(Pic_result$sd_mean))`> 0.6),]
counts <- ddply(test, .(test$Xaxis, test$Yaxis), nrow)
names(counts) <- c("xaxe", "yaxe", "Freq")
neu<-describeBy(test$`(Pic_result$sd_mean/max(Pic_result$sd_mean))`, test$Xaxis, test$Yaxis, mat= TRUE)
ggplot(counts, aes(x= xaxe, y = yaxe))+
geom_tile(aes(fill=Freq))+
scale_fill_distiller(palette = "Spectral")+
ylim(-24,0)+
theme_minimal()
