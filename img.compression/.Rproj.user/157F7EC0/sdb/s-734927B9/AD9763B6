{
    "collab_server" : "",
    "contents" : "# Hello, world!\n#\n# This is an example function named 'hello'\n# which prints 'Hello, world!'.\n#\n# You can learn more about package authoring with RStudio at:\n#\n#   http://r-pkgs.had.co.nz/\n#\n# Some useful keyboard shortcuts for package authoring:\n#\n#   Build and Reload Package:  'Ctrl + Shift + B'\n#   Check Package:             'Ctrl + Shift + E'\n#   Test Package:              'Ctrl + Shift + T'\n\n#\n###################This Function defines the Raster Size\n#\nlibrary(psych)\nDiv_Raster<- function (Size_x,Size_y, Div_count_x,Div_count_y){\n  i=1\n  Div_const_x<- Size_x/Div_count_x\n  Div_Frame_x<- i\n  while (i < Div_count_x){\n    i=i+1;\n    Div_Frame_x=rbind(Div_Frame_x,i);\n  }\n  i=1\n  Div_const_y<- Size_y/Div_count_y\n  Div_Frame_y<- i\n  while (i < Div_count_y){\n    i=i+1;\n    Div_Frame_y=rbind(Div_Frame_y,i);\n  }\n\n  mesh <- array(1,dim = c(Div_count_y,Div_count_x))\n  i = 0\n  while(i<= length(Div_Frame_y)){\n    mesh[i,] <- paste(Div_Frame_x,Div_Frame_y[i],sep=\"/\");\n    i=i+1;\n  }\n  return (mesh)\n}\n\n#\n#####################Scale Mesh\n#\nScale_Mesh<- function(Size_x, Size_y,Div_count_x,Div_count_y, mesh){\na<-(Size_x)/Div_count_x\nm_a<-Size_x%%Div_count_x\nr_a<-ceiling(a)\nsc_mesh <- mesh[,rep(1:ncol(mesh),each=r_a)]\n  if(m_a){\n    sc_mesh<-sc_mesh[,-c((Size_x+1):length(sc_mesh[1,])) ]\n  }\nb<- (Size_y)/Div_count_y\nm_b<-Size_y%%Div_count_y\nr_b<-ceiling(b)\nsc_mesh <- sc_mesh[rep(1:nrow(sc_mesh),each=r_b),]\n  if(m_b){\n   sc_mesh<-sc_mesh[-c((Size_y+1):length(sc_mesh[,1])),]\n  }\nreturn(sc_mesh)\n}\n\n\n\n#\n############################Change RBG to HSV\n#\npic_HSV<- function(Size_x,Size_y,img){\n\nimg_h <- array(1,dim = c(Size_y,Size_x,4))\ni=1\n  while (i<= Size_y){\n    img_hsv<-t(rgb2hsv(img[i,,1],img[i,,2],img[i,,3],1))\n    img_h[i,,1]<- img_hsv[,1]\n    img_h[i,,2]<- img_hsv[,2]\n    img_h[i,,3]<- img_hsv[,3]\n    i = i +1;\n  }\nreturn(img_h)\n}\n\n\n#\n#do the math#########################################\n#\nAnalyse_Pic <- function (Pic){\n  library(psych)\n  Cluster_result1<-describeBy(as.numeric(Pic[,,1]), group = Pic[,,4],mat=TRUE)\n  Cluster_result2<-describeBy(as.numeric(Pic[,,2]), group = Pic[,,4],mat=TRUE)\n  Cluster_result3<-describeBy(as.numeric(Pic[,,3]), group = Pic[,,4],mat=TRUE)\n  RowCol<-matrix(unlist(strsplit(as.character( Cluster_result3$group1 ), \"/\")),ncol=2, byrow=TRUE)\n  RowCol<- as.data.frame(RowCol)\n  RowCol1<- cbind(as.numeric(levels(RowCol$V1))[RowCol$V1],\n                as.numeric(levels(RowCol$V2))[RowCol$V2])\n  Cluster_result <- cbind.data.frame(Cluster_result1$median,\n                                   Cluster_result2$median,\n                                   Cluster_result3$median,\n                                   Cluster_result1$range,\n                                   Cluster_result2$range,\n                                   Cluster_result3$range,\n                                   RowCol1\n  )\n  colnames(Cluster_result)<-c(\"hue\",\"sat\",\"val\",\"sd_hue\",\"sd_sat\",\"sd_val\",\"Xaxis\",\"Yaxis\")\n  Cluster_result$Yaxis<-Cluster_result$Yaxis*-1\n  Cluster_result<-cbind.data.frame(Cluster_result,Cluster_result$sd_sat)\n  colnames(Cluster_result)<-c(\"hue\",\"sat\",\"val\",\"sd_hue\",\"sd_sat\",\"sd_val\",\"Xaxis\",\"Yaxis\",\"sd_tbd\")\n  Cluster_result$sd_tbd[is.infinite(Cluster_result$sd_tbd)]<-0\n  return(Cluster_result)\n}\n#\n##########################################\n#\n",
    "created" : 1531231258086.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2860413821",
    "id" : "AD9763B6",
    "lastKnownWriteTime" : 1531741325,
    "last_content_update" : 1531741325903,
    "path" : "C:/Users/maximilian.lacher/Documents/GitHub/Photo-and-Web-Mining/img.compression/R/CompressImg.R",
    "project_path" : "R/CompressImg.R",
    "properties" : {
    },
    "relative_order" : 4,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}