y_Pixel<-img[,1,1]
x_Size<-length(x_Pixel)
y_Size<-length(y_Pixel)
x_Grid<-Div_Raster(x_Size, 20)
y_Grid<-Div_Raster(y_Size, 18)
img_c<-Clustered_Pic(img,y_Size,x_Size)
Cluster_result1<-describeBy(as.numeric(img_c[,,1]), group = img_c[,,4],mat=TRUE)
Cluster_result2<-describeBy(as.numeric(img_c[,,2]), group = img_c[,,4],mat=TRUE)
Cluster_result3<-describeBy(as.numeric(img_c[,,3]), group = img_c[,,4],mat=TRUE)
RowCol<-matrix(unlist(strsplit(as.character( Cluster_result3$group1 ), "/")),ncol=2, byrow=TRUE)
RowCol<- as.data.frame(RowCol)
RowCol1<- cbind(as.numeric(levels(RowCol$V1))[RowCol$V1],
as.numeric(levels(RowCol$V2))[RowCol$V2])
Cluster_result <- cbind.data.frame(Cluster_result1$median,
Cluster_result2$median,
Cluster_result3$median,
Cluster_result1$sd,
Cluster_result2$sd,
Cluster_result3$sd,
RowCol1
)
colnames(Cluster_result)<-c("med_red","med_green","med_blue","sd_red","sd_green","sd_blue","Xaxis","Yaxis")
Cluster_result$Yaxis<-Cluster_result$Yaxis*-1
ggplot(Cluster_result, aes(x=Yaxis, y = sd_red))+
geom_density()+
theme_minimal()
ggplot(Cluster_result, aes(x= Yaxis, y = sd_red))+
geom_density()+
theme_minimal()
ggplot(Cluster_result, aes(x= Yaxis, y = sd_red))+
geom_point()+
theme_minimal()
ggplot(Cluster_result, aes(x= Yaxis, y = sd_red))+
geom_density()
ggplot(Cluster_result, aes(x= Yaxis, y = sd_red))+
geom_point()
ggplot(Cluster_result, aes(x= Yaxis, y = sd_red))+
geom_point()+
geom_smooth()+
theme_minimal()
ggplot(Cluster_result, aes(x= Yaxis, y = sd_red))+
geom_point()+
geom_smooth(method = "lm")+
theme_minimal()
ggplot(Cluster_result, aes(x= Yaxis, y = sd_red))+
geom_point()+
geom_smooth()+
theme_minimal()
ggplot(Cluster_result, aes(x= Yaxis, y = (sd_red+sd_blue+sd_green)/3))+
geom_point()+
geom_smooth()+
theme_minimal()
ggplot(Cluster_result, aes(x= Yaxis, y = (sd_red+sd_blue+sd_green)/3))+
geom_point()
if(exists("rasterImage")){
plot(1:2, type='n')
rasterImage(img,1,1,2,2)
}
img <- readJPEG("C:/Users/maximilian.lacher/Downloads/sunset.jpg")
x_Pixel<-img[1,,1]
y_Pixel<-img[,1,1]
x_Size<-length(x_Pixel)
y_Size<-length(y_Pixel)
x_Grid<-Div_Raster(x_Size, 20)
y_Grid<-Div_Raster(y_Size, 18)
img_c<-Clustered_Pic(img,y_Size,x_Size)
Cluster_result1<-describeBy(as.numeric(img_c[,,1]), group = img_c[,,4],mat=TRUE)
Cluster_result2<-describeBy(as.numeric(img_c[,,2]), group = img_c[,,4],mat=TRUE)
Cluster_result3<-describeBy(as.numeric(img_c[,,3]), group = img_c[,,4],mat=TRUE)
RowCol<-matrix(unlist(strsplit(as.character( Cluster_result3$group1 ), "/")),ncol=2, byrow=TRUE)
RowCol<- as.data.frame(RowCol)
RowCol1<- cbind(as.numeric(levels(RowCol$V1))[RowCol$V1],
as.numeric(levels(RowCol$V2))[RowCol$V2])
Cluster_result <- cbind.data.frame(Cluster_result1$median,
Cluster_result2$median,
Cluster_result3$median,
Cluster_result1$sd,
Cluster_result2$sd,
Cluster_result3$sd,
RowCol1
)
colnames(Cluster_result)<-c("med_red","med_green","med_blue","sd_red","sd_green","sd_blue","Xaxis","Yaxis")
Cluster_result$Yaxis<-Cluster_result$Yaxis*-1
ggplot(Cluster_result, aes(x= Yaxis, y = (sd_red+sd_blue+sd_green)/3))+
geom_point()+
geom_smooth()+
theme_minimal()
ggplot(Cluster_result, aes(x= Yaxis, y = (sd_red+sd_blue+sd_green)/3))+
geom_smooth()+
theme_minimal()
library(img.compression)
library(img.compression)
library(img.compression)
library(img.compression)
library(img.compression)
library(img.compression)
library(img.compression)
library(img.compression)
library(img.compression)
library(img.compression)
library(img.compression)
library(img.compression)
library(img.compression)
library(jpeg)
library(ggplot2)
library(psych)
library(img.compression)
library(fmsb)
library(gridExtra)
library(plyr)
img <- readJPEG("E:/Users/lacher/Documents/GitHub/Photo-and-Web-Mining/InstaSave.jpg")
mesh <- array(1,dim = c(24,16))
i = 0
while(i<= length(y_Grid)){
mesh[i,] <- paste(x_Grid,y_Grid[i],sep="/");
i=i+1;
}
img <- readJPEG(location)
x_Pixel<-img[1,,1]
y_Pixel<-img[,1,1]
x_Size<-length(x_Pixel)
y_Size<-length(y_Pixel)
x_Grid<-Div_Raster(x_Size, 16)
y_Grid<-Div_Raster(y_Size, 24)
Cluster_result  <- data.frame(File=character())
img_h <- array(1,dim = c(y_Size,x_Size,4))
mesh <- array(1,dim = c(24,16))
i = 0
while(i<= length(y_Grid)){
mesh[i,] <- paste(x_Grid,y_Grid[i],sep="/");
i=i+1;
}
a<-(x_Size)/16
m_a<-x_Size%%16
if(m_a){
r_a<-round(a)
daten_doppelt<-daten_doppelt[,-c((x_Size+1):length(daten_doppelt[1,])) ]
}
b<- (y_Size)/24
m_b<-y_Size%%24
if(m_b){
r_b<-round(b)
daten_doppelt<-daten_doppelt[-c((y_Size+1):length(daten_doppelt[,1])),]
}
daten_doppelt <- mesh[,rep(1:ncol(mesh),each=r_a)]
a<-(x_Size)/16
m_a<-x_Size%%16
if(m_a){
r_a<-round(a)
daten_doppelt<-daten_doppelt[,-c((x_Size+1):length(daten_doppelt[1,])) ]
}
b<- (y_Size)/24
m_b<-y_Size%%24
if(m_b){
r_b<-round(b)
daten_doppelt<-daten_doppelt[-c((y_Size+1):length(daten_doppelt[,1])),]
}
daten_doppelt <- mesh[,rep(1:ncol(mesh),each=r_a)]
r_a<-round(a)
r_b<-round(b)
daten_doppelt <- mesh[,rep(1:ncol(mesh),each=r_a)]
daten_doppelt <- daten_doppelt[rep(1:nrow(daten_doppelt),each=r_b),]
a<-(x_Size)/16
m_a<-x_Size%%16
r_a<-round(a)
r_b<-round(b)
if(m_a){
daten_doppelt<-daten_doppelt[,-c((x_Size+1):length(daten_doppelt[1,])) ]
}
b<- (y_Size)/24
m_b<-y_Size%%24
if(m_b){
daten_doppelt<-daten_doppelt[-c((y_Size+1):length(daten_doppelt[,1])),]
}
a<-(x_Size)/16
m_a<-x_Size%%16
r_a<-round(a)
daten_doppelt <- mesh[,rep(1:ncol(mesh),each=r_a)]
if(m_a){
daten_doppelt<-daten_doppelt[,-c((x_Size+1):length(daten_doppelt[1,])) ]
}
b<- (y_Size)/24
m_b<-y_Size%%2
daten_doppelt <- daten_doppelt[rep(1:nrow(daten_doppelt),each=r_b),]4
r_b<-round(b)
if(m_b){
daten_doppelt<-daten_doppelt[-c((y_Size+1):length(daten_doppelt[,1])),]
}
a<-(x_Size)/16
m_a<-x_Size%%16
r_a<-round(a)
daten_doppelt <- mesh[,rep(1:ncol(mesh),each=r_a)]
if(m_a){
daten_doppelt<-daten_doppelt[,-c((x_Size+1):length(daten_doppelt[1,])) ]
}
b<- (y_Size)/24
m_b<-y_Size%%24
daten_doppelt <- daten_doppelt[rep(1:nrow(daten_doppelt),each=r_b),]
r_b<-round(b)
if(m_b){
daten_doppelt<-daten_doppelt[-c((y_Size+1):length(daten_doppelt[,1])),]
}
i=1
while (i<= y_Size){
img_hsv<-t(rgb2hsv(img[i,,1],img[i,,2],img[i,,3],1))
img_h[i,,1]<- img_hsv[,1]
img_h[i,,2]<- img_hsv[,2]
img_h[i,,3]<- img_hsv[,3]
i = i +1;
}
#################################################################
img_h[,,4]<- sc_mesh
a<-(x_Size)/16
m_a<-x_Size%%16
r_a<-round(a)
sc_mesh <- mesh[,rep(1:ncol(mesh),each=r_a)]
if(m_a){
sc_mesh<-sc_mesh[,-c((x_Size+1):length(sc_mesh[1,])) ]
}
b<- (y_Size)/24
m_b<-y_Size%%24
sc_mesh <- sc_mesh[rep(1:nrow(sc_mesh),each=r_b),]
r_b<-round(b)
if(m_b){
sc_mesh<-sc_mesh[-c((y_Size+1):length(sc_mesh[,1])),]
}
img_h[,,4]<- sc_mesh
Pic_result<-Analyse_Pic(img_h)
View(Pic_result)
ggplot(Cluster_result , aes(x=Xaxis,y=Yaxis))+
geom_tile(aes(fill=rgb(med_red,med_green,med_blue)))+
scale_fill_identity()+
theme_minimal()
ggplot(Pic_result , aes(x=Xaxis,y=Yaxis))+
geom_tile(aes(fill=rgb(med_red,med_green,med_blue)))+
scale_fill_identity()+
theme_minimal()
ggplot(Pic_result , aes(x=Xaxis,y=Yaxis))+
geom_tile(aes(fill=med_red))+
scale_fill_identity()+
theme_minimal()
ggplot(Pic_result , aes(x=Xaxis,y=Yaxis))+
geom_tile(aes(fill=med_red))+
scale_fill_identity()+
theme_minimal()
ggplot(Pic_result , aes(x=Xaxis,y=Yaxis))+
geom_tile(aes(fill=med_red))+
#scale_fill_identity()+
theme_minimal()
if(exists("rasterImage")){
plot(1:2, type='n')
rasterImage(img,1,1,2,2)
}
ggplot(Pic_result , aes(x=Xaxis,y=Yaxis))+
geom_tile(aes(fill=med_red))+
#scale_fill_identity()+
theme_minimal()
ggplot(Pic_result , aes(x=Xaxis,y=Yaxis))+
geom_tile(aes(fill=sd_red))+
#scale_fill_identity()+
theme_minimal()
ggplot(Pic_result , aes(x=Xaxis,y=Yaxis))+
geom_tile(aes(fill=sd_blue))+
#scale_fill_identity()+
theme_minimal()
ggplot(Pic_result , aes(x=Xaxis,y=Yaxis))+
geom_tile(aes(fill=med_blue))+
#scale_fill_identity()+
theme_minimal()
if(exists("rasterImage")){
plot(1:2, type='n')
rasterImage(img,1,1,2,2)
}
ggplot(Pic_result , aes(x=Xaxis,y=Yaxis))+
geom_tile(aes(fill=med_green))+
#scale_fill_identity()+
theme_minimal()
library(img.compression)
library(img.compression)
x_Grid<-Div_Raster(x_Size, y_Size,16,24)
library(img.compression)
test<- pic_HSV(x_Size,y_Size,img)
test<- pic_HSV(x_Size,y_Size,img)
library(img.compression)
test<- pic_HSV(x_Size,y_Size,img)
library(img.compression)
test<- pic_HSV(x_Size,y_Size,img)
library(img.compression)
sc_mesh<- Scale_Mesh(x_Size,y_Size,16,24,Mesh)
sc_mesh<- Scale_Mesh(x_Size,y_Size,16,24,mesh)
Mesh <-Div_Raster(x_Size, y_Size,16,24)
x_Pixel<-img[1,,1]
y_Pixel<-img[,1,1]
x_Size<-length(x_Pixel)
y_Size<-length(y_Pixel)
Mesh <-Div_Raster(x_Size, y_Size,16,24)
sc_Mesh<- Scale_Mesh(x_Size,y_Size,16,24,Mesh)
img_hsv<- pic_HSV(x_Size,y_Size,img)
img_hsv[,,4]<- sc_mesh
Pic_result<-Analyse_Pic(img_hsv)
x_Size<-length(img[1,,1])
img <- readJPEG("E:/Users/lacher/Documents/GitHub/Photo-and-Web-Mining/InstaSave[2].jpg")
img <- readJPEG(location)
x_Size<-length(img[1,,1])
y_Size<-length(img[,1,1])
#create mesh
Mesh <-Div_Raster(x_Size, y_Size,16,24)
sc_Mesh<- Scale_Mesh(x_Size,y_Size,16,24,Mesh)
#convert rgb to hsv
img_hsv<- pic_HSV(x_Size,y_Size,img)
img_hsv[,,4]<- sc_mesh
library(img.compression)
img <- readJPEG("E:/Users/lacher/Documents/GitHub/Photo-and-Web-Mining/InstaSave[2].jpg")
Cluster_result  <- data.frame(File=character())
img <- readJPEG(location)
x_Size<-length(img[1,,1])
y_Size<-length(img[,1,1])
#create mesh
Mesh <-Div_Raster(x_Size, y_Size,16,24)
sc_Mesh<- Scale_Mesh(x_Size,y_Size,16,24,Mesh)
#convert rgb to hsv
img_hsv<- pic_HSV(x_Size,y_Size,img)
img_hsv[,,4]<- sc_mesh
library(img.compression)
img <- readJPEG("E:/Users/lacher/Documents/GitHub/Photo-and-Web-Mining/InstaSave[2].jpg")
img <- readJPEG(location)
x_Size<-length(img[1,,1])
y_Size<-length(img[,1,1])
#create mesh
Mesh <-Div_Raster(x_Size, y_Size,16,24)
sc_Mesh<- Scale_Mesh(x_Size,y_Size,16,24,Mesh)
#convert rgb to hsv
img_hsv<- pic_HSV(x_Size,y_Size,img)
img_hsv[,,4]<- sc_Mesh
Pic_result<-Analyse_Pic(img_hsv)
View(Pic_result)
Pic_result<- cbind.data.frame(Pic_result,(Pic_result$sd_mean/max(Pic_result$sd_mean)) ,files[i],x_Size/y_Size)
Cluster_result <- rbind.data.frame(Cluster_result,Pic_result)
Cluster_result  <- data.frame(File=character())
Cluster_result <- rbind.data.frame(Cluster_result,Pic_result)
View(Cluster_result)
Path <- "E:/Users/lacher/Documents/GitHub/Photo-and-Web-Mining/"
files = list.files(path = Path, pattern="*.jpg")
pb<-winProgressBar(title="Example progress bar", label="progress bar",min=0,max=100, initial = 0, width = 300)
#Path <- "C:/Users/maximilian.lacher/Documents/GitHub/Photo-and-Web-Mining"
Path <- "E:/Users/lacher/Documents/GitHub/Photo-and-Web-Mining/"
files = list.files(path = Path, pattern="*.jpg")
#img <- readJPEG("C:/Users/maximilian.lacher/Downloads/test.jpg")
#img <- readJPEG("E:/Users/lacher/Documents/GitHub/Photo-and-Web-Mining/InstaSave[2].jpg")
Cluster_result  <- data.frame(File=character())
i=1
while (i <= length(files)){
location <- paste(Path,files[i],sep= "/")
img <- readJPEG(location)
x_Size<-length(img[1,,1])
y_Size<-length(img[,1,1])
#create mesh
Mesh <-Div_Raster(x_Size, y_Size,16,24)
sc_Mesh<- Scale_Mesh(x_Size,y_Size,16,24,Mesh)
#convert rgb to hsv
img_hsv<- pic_HSV(x_Size,y_Size,img)
img_hsv[,,4]<- sc_Mesh
#pic analyse
Pic_result<-Analyse_Pic(img_hsv)
Pic_result<- cbind.data.frame(Pic_result,(Pic_result$sd_mean/max(Pic_result$sd_mean)) ,files[i],x_Size/y_Size)
Cluster_result <- rbind.data.frame(Cluster_result,Pic_result)
setWinProgressBar(pb,i/(length(files))*100)
i = i+1
Pic_result<-""
}
close(pb)
pb<-winProgressBar(title="Example progress bar", label="progress bar",min=0,max=100, initial = 0, width = 300)
#Path <- "C:/Users/maximilian.lacher/Documents/GitHub/Photo-and-Web-Mining"
Path <- "E:/Users/lacher/Documents/GitHub/Photo-and-Web-Mining/"
files = list.files(path = Path, pattern="*.jpg")
#img <- readJPEG("C:/Users/maximilian.lacher/Downloads/test.jpg")
#img <- readJPEG("E:/Users/lacher/Documents/GitHub/Photo-and-Web-Mining/InstaSave[2].jpg")
Cluster_result  <- data.frame(File=character())
i=1
while (i <= length(files)){
location <- paste(Path,files[i],sep= "/")
img <- readJPEG(location)
x_Size<-length(img[1,,1])
y_Size<-length(img[,1,1])
#create mesh
Mesh <-Div_Raster(x_Size, y_Size,16,24)
sc_Mesh<- Scale_Mesh(x_Size,y_Size,16,24,Mesh)
#convert rgb to hsv
img_hsv<- pic_HSV(x_Size,y_Size,img)
img_hsv[,,4]<- sc_Mesh
#pic analyse
Pic_result<-Analyse_Pic(img_hsv)
Pic_result<- cbind.data.frame(Pic_result,(Pic_result$sd_tbd/max(Pic_result$sd_tbd)) ,files[i],x_Size/y_Size)
Cluster_result <- rbind.data.frame(Cluster_result,Pic_result)
setWinProgressBar(pb,i/(length(files))*100)
i = i+1
Pic_result<-""
}
close(pb)
library(img.compression)
location <- paste(Path,files[6],sep= "/")
img <- readJPEG(location)
x_Size<-length(img[1,,1])
y_Size<-length(img[,1,1])
#create mesh
Mesh <-Div_Raster(x_Size, y_Size,16,24)
sc_Mesh<- Scale_Mesh(x_Size,y_Size,16,24,Mesh)
#convert rgb to hsv
img_hsv<- pic_HSV(x_Size,y_Size,img)
img_hsv[,,4]<- sc_Mesh
pb<-winProgressBar(title="Example progress bar", label="progress bar",min=0,max=100, initial = 0, width = 300)
#Path <- "C:/Users/maximilian.lacher/Documents/GitHub/Photo-and-Web-Mining"
Path <- "E:/Users/lacher/Documents/GitHub/Photo-and-Web-Mining/"
files = list.files(path = Path, pattern="*.jpg")
#img <- readJPEG("C:/Users/maximilian.lacher/Downloads/test.jpg")
#img <- readJPEG("E:/Users/lacher/Documents/GitHub/Photo-and-Web-Mining/InstaSave[2].jpg")
Cluster_result  <- data.frame(File=character())
i=1
while (i <= length(files)){
location <- paste(Path,files[i],sep= "/")
img <- readJPEG(location)
x_Size<-length(img[1,,1])
y_Size<-length(img[,1,1])
#create mesh
Mesh <-Div_Raster(x_Size, y_Size,16,24)
sc_Mesh<- Scale_Mesh(x_Size,y_Size,16,24,Mesh)
#convert rgb to hsv
img_hsv<- pic_HSV(x_Size,y_Size,img)
img_hsv[,,4]<- sc_Mesh
#pic analyse
Pic_result<-Analyse_Pic(img_hsv)
Pic_result<- cbind.data.frame(Pic_result,(Pic_result$sd_tbd/max(Pic_result$sd_tbd)) ,files[i],x_Size/y_Size)
Cluster_result <- rbind.data.frame(Cluster_result,Pic_result)
setWinProgressBar(pb,i/(length(files))*100)
i = i+1
Pic_result<-""
}
close(pb)
test <-Cluster_result[(Cluster_result$sd_sat > 0.1),]
counts <- ddply(test, .(test$Xaxis, test$Yaxis), nrow)
names(counts) <- c("xaxe", "yaxe", "Freq")
neu<-describeBy(test$sd_sat, test$Xaxis, test$Yaxis, mat= TRUE)
ggplot(counts, aes(x= xaxe, y = yaxe))+
geom_tile(aes(fill=Freq))+
scale_fill_distiller(palette = "Spectral")+
ylim(-24,0)+
theme_minimal()
View(test)
View(counts)
test <-Cluster_result[(Cluster_result$sd_sat > 0.5),]
counts <- ddply(test, .(test$Xaxis, test$Yaxis), nrow)
names(counts) <- c("xaxe", "yaxe", "Freq")
neu<-describeBy(test$sd_sat, test$Xaxis, test$Yaxis, mat= TRUE)
ggplot(counts, aes(x= xaxe, y = yaxe))+
geom_tile(aes(fill=Freq))+
scale_fill_distiller(palette = "Spectral")+
ylim(-24,0)+
theme_minimal()
counts <- ddply(test, .(test$Xaxis, test$Yaxis), nrow)
names(counts) <- c("xaxe", "yaxe", "Freq")
ggplot(counts, aes(x= xaxe, y = yaxe))+
geom_tile(aes(fill=Freq))
test <-Cluster_result[(Cluster_result$sat > 0.5),]
counts <- ddply(test, .(test$Xaxis, test$Yaxis), nrow)
names(counts) <- c("xaxe", "yaxe", "Freq")
ggplot(counts, aes(x= xaxe, y = yaxe))+
geom_tile(aes(fill=Freq))+
scale_fill_distiller(palette = "Spectral")+
ylim(-24,0)+
theme_minimal()
na.omit(count)
ggplot(counts, aes(x= xaxe, y = yaxe))+
geom_tile(aes(fill=Freq))+
scale_fill_distiller(palette = "Spectral")+
ylim(-24,0)+
theme_minimal()
counts<-na.omit(counts)
ggplot(counts, aes(x= xaxe, y = yaxe))+
geom_tile(aes(fill=Freq))+
scale_fill_distiller(palette = "Spectral")+
ylim(-24,0)+
theme_minimal()
ggplot(counts, aes(x= xaxe, y = yaxe))+
geom_tile(aes(fill=Freq))+
scale_fill_distiller(palette = "Spectral")+
#ylim(-24,0)+
theme_minimal()
ggplot(counts, aes(x= xaxe, y = yaxe))+
geom_tile(aes(fill=Freq))+
scale_fill_distiller(palette = "Spectral")+
#ylim(-24,0)+
theme_minimal()
ggplot(counts, aes(x= xaxe, y = yaxe))+
geom_tile(aes(fill=Freq))+
scale_fill_distiller(palette = "Spectral")+
scale_fill_identity()+
#ylim(-24,0)+
theme_minimal()
ggplot(counts, aes(x= xaxe, y = yaxe))+
geom_tile(aes(fill=Freq))+
#scale_fill_distiller(palette = "Spectral")+
scale_fill_identity()+
#ylim(-24,0)+
theme_minimal()
test <-Cluster_result[(Cluster_result$sat > 0.5),]
counts <- ddply(test, .(test$Xaxis, test$Yaxis), nrow)
names(counts) <- c("xaxe", "yaxe", "Freq")
ggplot(counts, aes(x= xaxe, y = yaxe))+
geom_tile(aes(fill=Freq))+
scale_fill_distiller(palette = "Spectral")+
#ylim(-24,0)+
theme_minimal()
