rasterImage(img,1,1,2,2)
}
ggplot(Pic_result , aes(x=Xaxis,y=Yaxis))+
geom_tile(aes(fill=med_red))+
#scale_fill_identity()+
theme_minimal()
ggplot(Pic_result , aes(x=Xaxis,y=Yaxis))+
geom_tile(aes(fill=sd_red))+
#scale_fill_identity()+
theme_minimal()
ggplot(Pic_result , aes(x=Xaxis,y=Yaxis))+
geom_tile(aes(fill=sd_blue))+
#scale_fill_identity()+
theme_minimal()
ggplot(Pic_result , aes(x=Xaxis,y=Yaxis))+
geom_tile(aes(fill=med_blue))+
#scale_fill_identity()+
theme_minimal()
if(exists("rasterImage")){
plot(1:2, type='n')
rasterImage(img,1,1,2,2)
}
ggplot(Pic_result , aes(x=Xaxis,y=Yaxis))+
geom_tile(aes(fill=med_green))+
#scale_fill_identity()+
theme_minimal()
library(img.compression)
library(img.compression)
x_Grid<-Div_Raster(x_Size, y_Size,16,24)
library(img.compression)
test<- pic_HSV(x_Size,y_Size,img)
test<- pic_HSV(x_Size,y_Size,img)
library(img.compression)
test<- pic_HSV(x_Size,y_Size,img)
library(img.compression)
test<- pic_HSV(x_Size,y_Size,img)
library(img.compression)
sc_mesh<- Scale_Mesh(x_Size,y_Size,16,24,Mesh)
sc_mesh<- Scale_Mesh(x_Size,y_Size,16,24,mesh)
Mesh <-Div_Raster(x_Size, y_Size,16,24)
x_Pixel<-img[1,,1]
y_Pixel<-img[,1,1]
x_Size<-length(x_Pixel)
y_Size<-length(y_Pixel)
Mesh <-Div_Raster(x_Size, y_Size,16,24)
sc_Mesh<- Scale_Mesh(x_Size,y_Size,16,24,Mesh)
img_hsv<- pic_HSV(x_Size,y_Size,img)
img_hsv[,,4]<- sc_mesh
Pic_result<-Analyse_Pic(img_hsv)
x_Size<-length(img[1,,1])
img <- readJPEG("E:/Users/lacher/Documents/GitHub/Photo-and-Web-Mining/InstaSave[2].jpg")
img <- readJPEG(location)
x_Size<-length(img[1,,1])
y_Size<-length(img[,1,1])
#create mesh
Mesh <-Div_Raster(x_Size, y_Size,16,24)
sc_Mesh<- Scale_Mesh(x_Size,y_Size,16,24,Mesh)
#convert rgb to hsv
img_hsv<- pic_HSV(x_Size,y_Size,img)
img_hsv[,,4]<- sc_mesh
library(img.compression)
img <- readJPEG("E:/Users/lacher/Documents/GitHub/Photo-and-Web-Mining/InstaSave[2].jpg")
Cluster_result  <- data.frame(File=character())
img <- readJPEG(location)
x_Size<-length(img[1,,1])
y_Size<-length(img[,1,1])
#create mesh
Mesh <-Div_Raster(x_Size, y_Size,16,24)
sc_Mesh<- Scale_Mesh(x_Size,y_Size,16,24,Mesh)
#convert rgb to hsv
img_hsv<- pic_HSV(x_Size,y_Size,img)
img_hsv[,,4]<- sc_mesh
library(img.compression)
img <- readJPEG("E:/Users/lacher/Documents/GitHub/Photo-and-Web-Mining/InstaSave[2].jpg")
img <- readJPEG(location)
x_Size<-length(img[1,,1])
y_Size<-length(img[,1,1])
#create mesh
Mesh <-Div_Raster(x_Size, y_Size,16,24)
sc_Mesh<- Scale_Mesh(x_Size,y_Size,16,24,Mesh)
#convert rgb to hsv
img_hsv<- pic_HSV(x_Size,y_Size,img)
img_hsv[,,4]<- sc_Mesh
Pic_result<-Analyse_Pic(img_hsv)
View(Pic_result)
Pic_result<- cbind.data.frame(Pic_result,(Pic_result$sd_mean/max(Pic_result$sd_mean)) ,files[i],x_Size/y_Size)
Cluster_result <- rbind.data.frame(Cluster_result,Pic_result)
Cluster_result  <- data.frame(File=character())
Cluster_result <- rbind.data.frame(Cluster_result,Pic_result)
View(Cluster_result)
Path <- "E:/Users/lacher/Documents/GitHub/Photo-and-Web-Mining/"
files = list.files(path = Path, pattern="*.jpg")
pb<-winProgressBar(title="Example progress bar", label="progress bar",min=0,max=100, initial = 0, width = 300)
#Path <- "C:/Users/maximilian.lacher/Documents/GitHub/Photo-and-Web-Mining"
Path <- "E:/Users/lacher/Documents/GitHub/Photo-and-Web-Mining/"
files = list.files(path = Path, pattern="*.jpg")
#img <- readJPEG("C:/Users/maximilian.lacher/Downloads/test.jpg")
#img <- readJPEG("E:/Users/lacher/Documents/GitHub/Photo-and-Web-Mining/InstaSave[2].jpg")
Cluster_result  <- data.frame(File=character())
i=1
while (i <= length(files)){
location <- paste(Path,files[i],sep= "/")
img <- readJPEG(location)
x_Size<-length(img[1,,1])
y_Size<-length(img[,1,1])
#create mesh
Mesh <-Div_Raster(x_Size, y_Size,16,24)
sc_Mesh<- Scale_Mesh(x_Size,y_Size,16,24,Mesh)
#convert rgb to hsv
img_hsv<- pic_HSV(x_Size,y_Size,img)
img_hsv[,,4]<- sc_Mesh
#pic analyse
Pic_result<-Analyse_Pic(img_hsv)
Pic_result<- cbind.data.frame(Pic_result,(Pic_result$sd_mean/max(Pic_result$sd_mean)) ,files[i],x_Size/y_Size)
Cluster_result <- rbind.data.frame(Cluster_result,Pic_result)
setWinProgressBar(pb,i/(length(files))*100)
i = i+1
Pic_result<-""
}
close(pb)
pb<-winProgressBar(title="Example progress bar", label="progress bar",min=0,max=100, initial = 0, width = 300)
#Path <- "C:/Users/maximilian.lacher/Documents/GitHub/Photo-and-Web-Mining"
Path <- "E:/Users/lacher/Documents/GitHub/Photo-and-Web-Mining/"
files = list.files(path = Path, pattern="*.jpg")
#img <- readJPEG("C:/Users/maximilian.lacher/Downloads/test.jpg")
#img <- readJPEG("E:/Users/lacher/Documents/GitHub/Photo-and-Web-Mining/InstaSave[2].jpg")
Cluster_result  <- data.frame(File=character())
i=1
while (i <= length(files)){
location <- paste(Path,files[i],sep= "/")
img <- readJPEG(location)
x_Size<-length(img[1,,1])
y_Size<-length(img[,1,1])
#create mesh
Mesh <-Div_Raster(x_Size, y_Size,16,24)
sc_Mesh<- Scale_Mesh(x_Size,y_Size,16,24,Mesh)
#convert rgb to hsv
img_hsv<- pic_HSV(x_Size,y_Size,img)
img_hsv[,,4]<- sc_Mesh
#pic analyse
Pic_result<-Analyse_Pic(img_hsv)
Pic_result<- cbind.data.frame(Pic_result,(Pic_result$sd_tbd/max(Pic_result$sd_tbd)) ,files[i],x_Size/y_Size)
Cluster_result <- rbind.data.frame(Cluster_result,Pic_result)
setWinProgressBar(pb,i/(length(files))*100)
i = i+1
Pic_result<-""
}
close(pb)
library(img.compression)
location <- paste(Path,files[6],sep= "/")
img <- readJPEG(location)
x_Size<-length(img[1,,1])
y_Size<-length(img[,1,1])
#create mesh
Mesh <-Div_Raster(x_Size, y_Size,16,24)
sc_Mesh<- Scale_Mesh(x_Size,y_Size,16,24,Mesh)
#convert rgb to hsv
img_hsv<- pic_HSV(x_Size,y_Size,img)
img_hsv[,,4]<- sc_Mesh
pb<-winProgressBar(title="Example progress bar", label="progress bar",min=0,max=100, initial = 0, width = 300)
#Path <- "C:/Users/maximilian.lacher/Documents/GitHub/Photo-and-Web-Mining"
Path <- "E:/Users/lacher/Documents/GitHub/Photo-and-Web-Mining/"
files = list.files(path = Path, pattern="*.jpg")
#img <- readJPEG("C:/Users/maximilian.lacher/Downloads/test.jpg")
#img <- readJPEG("E:/Users/lacher/Documents/GitHub/Photo-and-Web-Mining/InstaSave[2].jpg")
Cluster_result  <- data.frame(File=character())
i=1
while (i <= length(files)){
location <- paste(Path,files[i],sep= "/")
img <- readJPEG(location)
x_Size<-length(img[1,,1])
y_Size<-length(img[,1,1])
#create mesh
Mesh <-Div_Raster(x_Size, y_Size,16,24)
sc_Mesh<- Scale_Mesh(x_Size,y_Size,16,24,Mesh)
#convert rgb to hsv
img_hsv<- pic_HSV(x_Size,y_Size,img)
img_hsv[,,4]<- sc_Mesh
#pic analyse
Pic_result<-Analyse_Pic(img_hsv)
Pic_result<- cbind.data.frame(Pic_result,(Pic_result$sd_tbd/max(Pic_result$sd_tbd)) ,files[i],x_Size/y_Size)
Cluster_result <- rbind.data.frame(Cluster_result,Pic_result)
setWinProgressBar(pb,i/(length(files))*100)
i = i+1
Pic_result<-""
}
close(pb)
test <-Cluster_result[(Cluster_result$sd_sat > 0.1),]
counts <- ddply(test, .(test$Xaxis, test$Yaxis), nrow)
names(counts) <- c("xaxe", "yaxe", "Freq")
neu<-describeBy(test$sd_sat, test$Xaxis, test$Yaxis, mat= TRUE)
ggplot(counts, aes(x= xaxe, y = yaxe))+
geom_tile(aes(fill=Freq))+
scale_fill_distiller(palette = "Spectral")+
ylim(-24,0)+
theme_minimal()
View(test)
View(counts)
test <-Cluster_result[(Cluster_result$sd_sat > 0.5),]
counts <- ddply(test, .(test$Xaxis, test$Yaxis), nrow)
names(counts) <- c("xaxe", "yaxe", "Freq")
neu<-describeBy(test$sd_sat, test$Xaxis, test$Yaxis, mat= TRUE)
ggplot(counts, aes(x= xaxe, y = yaxe))+
geom_tile(aes(fill=Freq))+
scale_fill_distiller(palette = "Spectral")+
ylim(-24,0)+
theme_minimal()
counts <- ddply(test, .(test$Xaxis, test$Yaxis), nrow)
names(counts) <- c("xaxe", "yaxe", "Freq")
ggplot(counts, aes(x= xaxe, y = yaxe))+
geom_tile(aes(fill=Freq))
test <-Cluster_result[(Cluster_result$sat > 0.5),]
counts <- ddply(test, .(test$Xaxis, test$Yaxis), nrow)
names(counts) <- c("xaxe", "yaxe", "Freq")
ggplot(counts, aes(x= xaxe, y = yaxe))+
geom_tile(aes(fill=Freq))+
scale_fill_distiller(palette = "Spectral")+
ylim(-24,0)+
theme_minimal()
na.omit(count)
ggplot(counts, aes(x= xaxe, y = yaxe))+
geom_tile(aes(fill=Freq))+
scale_fill_distiller(palette = "Spectral")+
ylim(-24,0)+
theme_minimal()
counts<-na.omit(counts)
ggplot(counts, aes(x= xaxe, y = yaxe))+
geom_tile(aes(fill=Freq))+
scale_fill_distiller(palette = "Spectral")+
ylim(-24,0)+
theme_minimal()
ggplot(counts, aes(x= xaxe, y = yaxe))+
geom_tile(aes(fill=Freq))+
scale_fill_distiller(palette = "Spectral")+
#ylim(-24,0)+
theme_minimal()
ggplot(counts, aes(x= xaxe, y = yaxe))+
geom_tile(aes(fill=Freq))+
scale_fill_distiller(palette = "Spectral")+
#ylim(-24,0)+
theme_minimal()
ggplot(counts, aes(x= xaxe, y = yaxe))+
geom_tile(aes(fill=Freq))+
scale_fill_distiller(palette = "Spectral")+
scale_fill_identity()+
#ylim(-24,0)+
theme_minimal()
ggplot(counts, aes(x= xaxe, y = yaxe))+
geom_tile(aes(fill=Freq))+
#scale_fill_distiller(palette = "Spectral")+
scale_fill_identity()+
#ylim(-24,0)+
theme_minimal()
test <-Cluster_result[(Cluster_result$sat > 0.5),]
counts <- ddply(test, .(test$Xaxis, test$Yaxis), nrow)
names(counts) <- c("xaxe", "yaxe", "Freq")
ggplot(counts, aes(x= xaxe, y = yaxe))+
geom_tile(aes(fill=Freq))+
scale_fill_distiller(palette = "Spectral")+
#ylim(-24,0)+
theme_minimal()
library(img.compression)
library(jpeg)
library(ggplot2)
library(psych)
library(img.compression)
library(fmsb)
library(gridExtra)
library(plyr)
pb<-winProgressBar(title="Example progress bar", label="progress bar",min=0,max=100, initial = 0, width = 300)
#Path <- "C:/Users/maximilian.lacher/Documents/GitHub/Photo-and-Web-Mining/Pics"
#
Path <- "E:/Users/lacher/Documents/GitHub/Photo-and-Web-Mining/Pics"
files = list.files(path = Path, pattern="*.jpg")
Cluster_result  <- data.frame(File=character())
i=1
while (i <= length(files)){
#read pic
location <- paste(Path,files[i],sep= "/")
img <- readJPEG(location)
x_Size<-length(img[1,,1])
y_Size<-length(img[,1,1])
#create mesh
Mesh <-Div_Raster(x_Size, y_Size,20,24)
sc_Mesh<- Scale_Mesh(x_Size,y_Size,20,24,Mesh)
#convert rgb to hsv
img_hsv<- pic_HSV(x_Size,y_Size,img)
img_hsv[,,4]<- sc_Mesh
#pic analyse
Pic_result<-Analyse_Pic(img_hsv)
Pic_result<- cbind.data.frame(Pic_result,(Pic_result$sd_tbd/max(Pic_result$sd_tbd)) ,files[i],x_Size/y_Size)
Cluster_result <- rbind.data.frame(Cluster_result,Pic_result)
setWinProgressBar(pb,i/(length(files))*100)
i = i+1
Pic_result<-""
}
close(pb)
Val <-Cluster_result[(Cluster_result$val > 0.5),]
Val.counts <- ddply(Val, .(Val$Xaxis, Val$Yaxis), nrow)
names(Val.counts) <- c("xaxe", "yaxe", "Freq")
ggplot(Val.counts, aes(x= xaxe, y = yaxe))+
geom_tile(aes(fill=Freq))+
scale_fill_distiller(palette = "Spectral")+
ylim(-24,0)+
theme_minimal()
ggplot(Cluster_result, aes (x= hue))+
geom_histogram(aes(fill=hsv(hue,0.5, 0.5)))+
#geom_tile(aes(fill=hsv(hue,0.5, 0.5)))+
scale_fill_identity()+
#ylim(-1000,1800) +
theme_minimal()
ggplot(Cluster_result, aes (x= hue))+
geom_histogram(aes(fill=hsv(hue,0.5, 0.5)))+
#geom_tile(aes(fill=hsv(hue,0.5, 0.5)))+
scale_fill_identity()+
#ylim(-1000,1800) +
theme(panel.border = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_blank())+
theme_minimal()
#+coord_polar(start = 0)
ggplot(Cluster_result, aes (x= hue))+
geom_histogram(aes(fill=hsv(hue,0.5, 0.5)))+
#geom_tile(aes(fill=hsv(hue,0.5, 0.5)))+
scale_fill_identity()+
#ylim(-1000,1800) +
theme_minimal()+
theme(panel.border = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_blank())
ggplot(Cluster_result, aes (x= hue))+
geom_histogram(aes(fill=hsv(hue,0.5, 0.5)))+
#geom_tile(aes(fill=hsv(hue,0.5, 0.5)))+
scale_fill_identity()+
#ylim(-1000,1800) +
theme_minimal()+
theme(panel.border = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_blank())+
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
ggplot(Cluster_result, aes (x= hue))+
geom_histogram(aes(fill=hsv(hue,0.5, 0.5)))+
#geom_tile(aes(fill=hsv(hue,0.5, 0.5)))+
scale_fill_identity()+
#ylim(-1000,1800) +
theme_minimal()+
theme(panel.border = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_blank())+
theme(axis.title.y=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank())
ggplot(Cluster_result, aes (x= hue))+
geom_histogram(aes(fill=hsv(hue,0.5, 0.5)))+
#geom_tile(aes(fill=hsv(hue,0.5, 0.5)))+
scale_fill_identity()+
#ylim(-1000,1800) +
theme_minimal()+
theme(panel.border = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_blank())+
theme(axis.title.y=element_blank(),
axis.text.y=element_blank(),
axis.ticks.x=element_blank())
##color distribution
ggplot(Cluster_result, aes (x= hue))+
geom_histogram(aes(fill=hsv(hue,0.5, 0.5)))+
#geom_tile(aes(fill=hsv(hue,0.5, 0.5)))+
scale_fill_identity()+
#ylim(-1000,1800) +
theme_minimal()+
theme(panel.border = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_blank())+
theme(axis.title.y=element_blank(),
axis.text.y=element_blank(),
axis.ticks.x=element_blank())
ggplot(Cluster_result, aes (x= hue))+
geom_histogram(aes(fill=hsv(hue,0.5, 0.5)))+
#geom_tile(aes(fill=hsv(hue,0.5, 0.5)))+
scale_fill_identity()+
#ylim(-1000,1800) +
theme_minimal()+
theme(panel.border = element_blank(),
panel.grid.minor = element_blank())+
theme(axis.title.y=element_blank(),
axis.text.y=element_blank(),
axis.ticks.x=element_blank())
Size.counts <- ddply(Cluster_result, .(Cluster_result$`x_Size/y_Size`, nrow))
names(Val.counts) <- c("xaxe", "yaxe", "Freq")
ggplot(Cluster_result)+
theme_bw() +
theme(panel.border = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_blank())+
annotate("rect", xmin=0, xmax=1, ymin= 0,
ymax= 1/(as.numeric(levels(factor(Cluster_result$`x_Size/y_Size`)))),
alpha=0.1, color = "BLACK", fill = "WHITE")+
ylim(0,1.5)+
xlim(0,1.5)
Val <-Cluster_result[(Cluster_result$val > 0.5),]
Val.counts <- ddply(Val, .(Val$Xaxis, Val$Yaxis), nrow)
names(Val.counts) <- c("xaxe", "yaxe", "Freq")
ggplot(Val.counts, aes(x= xaxe, y = yaxe))+
geom_tile(aes(fill=Freq))+
scale_fill_distiller(palette = "Spectral")+
ylim(-24,0)+
theme_minimal()
Val <-Cluster_result[(Cluster_result$val > 0.5),]
Val.counts <- ddply(Val, .(Val$Xaxis, Val$Yaxis), nrow)
names(Val.counts) <- c("xaxe", "yaxe", "Freq")
ggplot(Val.counts, aes(x= xaxe, y = yaxe))+
geom_tile(aes(fill=Freq))+
scale_fill_distiller()+
ylim(-24,0)+
theme_minimal()
Val <-Cluster_result[(Cluster_result$val > 0.5),]
Val.counts <- ddply(Val, .(Val$Xaxis, Val$Yaxis), nrow)
names(Val.counts) <- c("xaxe", "yaxe", "Freq")
ggplot(Val.counts, aes(x= xaxe, y = yaxe))+
geom_tile(aes(fill=Freq))+
scale_fill_distiller(palette = "GREYS")+
ylim(-24,0)+
theme_minimal()
Val <-Cluster_result[(Cluster_result$val > 0.5),]
Val.counts <- ddply(Val, .(Val$Xaxis, Val$Yaxis), nrow)
names(Val.counts) <- c("xaxe", "yaxe", "Freq")
ggplot(Val.counts, aes(x= xaxe, y = yaxe))+
geom_tile(aes(fill=Freq))+
scale_fill_distiller(palette = "Greys")+
ylim(-24,0)+
theme_minimal()
Val <-Cluster_result[(Cluster_result$val > 0.5),]
Val.counts <- ddply(Val, .(Val$Xaxis, Val$Yaxis), nrow)
names(Val.counts) <- c("xaxe", "yaxe", "Freq")
ggplot(Val.counts, aes(x= xaxe, y = yaxe))+
geom_tile(aes(fill=Freq))+
scale_fill_distiller(palette = "Spectra")+
ylim(-24,0)+
theme_minimal()
##pic brigthness distribution
Val <-Cluster_result[(Cluster_result$val > 0.5),]
Val.counts <- ddply(Val, .(Val$Xaxis, Val$Yaxis), nrow)
names(Val.counts) <- c("xaxe", "yaxe", "Freq")
ggplot(Val.counts, aes(x= xaxe, y = yaxe))+
geom_tile(aes(fill=Freq))+
scale_fill_distiller(palette = "Spectral")+
ylim(-24,0)+
theme_minimal()
Val <-Cluster_result[(Cluster_result$val > 0.5),]
Val.counts <- ddply(Val, .(Val$Xaxis, Val$Yaxis), nrow)
names(Val.counts) <- c("xaxe", "yaxe", "Freq")
ggplot(Val.counts, aes(x= xaxe, y = yaxe))+
geom_tile(aes(fill=Freq))+
scale_fill_distiller(palette = "Spectral")+
ylim(-24,0)+
theme_minimal()+
theme(panel.border = element_blank(),
panel.grid.minor = element_blank())+
theme(axis.title.y=element_blank(),
axis.text.y=element_blank(),
axis.ticks.x=element_blank())
names(Val.counts) <- c("xaxe", "yaxe", "Freq")
ggplot(Val.counts, aes(x= xaxe, y = yaxe))+
geom_tile(aes(fill=Freq))+
scale_fill_distiller(palette = "Spectral")+
ylim(-24,0)+
theme_minimal()+
theme(panel.border = element_blank(),
panel.grid.minor = element_blank(),panel.grid.major = element_blank())+
theme(axis.title.y=element_blank(),
axis.text.y=element_blank(),
axis.ticks.x=element_blank(),
axis.text.x=element_blank()
)
Val <-Cluster_result[(Cluster_result$val > 0.5),]
Val.counts <- ddply(Val, .(Val$Xaxis, Val$Yaxis), nrow)
names(Val.counts) <- c("xaxe", "yaxe", "Freq")
ggplot(Val.counts, aes(x= xaxe, y = yaxe))+
geom_tile(aes(fill=Freq))+
scale_fill_distiller(palette = "Spectral")+
ylim(-24,0)+
theme_minimal()+
theme(panel.border = element_blank(),
panel.grid.minor = element_blank(),panel.grid.major = element_blank())+
theme(axis.title.y=element_blank(),
axis.text.y=element_blank(),
axis.ticks.x=element_blank(),
axis.text.x=element_blank(),
axis.title.y=element_blank()
)
##pic brigthness distribution
Val <-Cluster_result[(Cluster_result$val > 0.5),]
Val.counts <- ddply(Val, .(Val$Xaxis, Val$Yaxis), nrow)
names(Val.counts) <- c("xaxe", "yaxe", "Freq")
ggplot(Val.counts, aes(x= xaxe, y = yaxe))+
geom_tile(aes(fill=Freq))+
scale_fill_distiller(palette = "Spectral")+
ylim(-24,0)+
theme_minimal()+
theme(panel.border = element_blank(),
panel.grid.minor = element_blank(),panel.grid.major = element_blank())+
theme(axis.title.y=element_blank(),
axis.text.y=element_blank(),
axis.ticks.x=element_blank(),
axis.text.x=element_blank(),
axis.title.x=element_blank()
)
##test
Sat <-Cluster_result[(Cluster_result$sd_sat > 0.5),]
Sat.counts <- ddply(Sat, .(Sat$Xaxis, Sat$Yaxis), nrow)
names(Sat.counts) <- c("xsat", "ysat", "satFreq")
ggplot(Sat.counts, aes (x=xsat, y = ysat))+
geom_tile(aes(fill=satFreq))+
scale_fill_distiller(palette = "Spectral")+
theme_minimal()
View(Cluster_result)
